{"ast":null,"code":"import { LoginResponse, User } from \"../entity\";\nimport { client } from \"./client\";\nimport axios from 'axios';\nfunction checkLoggedIn() {\n  let token = localStorage.getItem(\"token\");\n  if (!token) {\n    return false;\n  }\n  try {\n    let payload = token.split(\".\")[1];\n    payload = JSON.parse(atob(payload));\n    return payload[\"exp\"] && payload[\"exp\"] > Date.now() / 1000;\n  } catch (e) {\n    return false;\n  }\n}\nfunction setToken(token) {\n  localStorage.setItem(\"token\", token);\n}\nfunction getToken() {\n  return localStorage.getItem(\"token\");\n}\nfunction logout() {\n  localStorage.removeItem(\"token\");\n}\n\n//LOGIN FUNCTION\nasync function login(username, password) {\n  const response = await fetch('http://localhost:8080/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  if (response.status == 200) {\n    const token = await response.text();\n    localStorage.setItem('token', JSON.stringify(token));\n    localStorage.setItem('user', JSON.stringify(username));\n    this.user = username;\n    this.token = token;\n    router.push(this.returnUrl || '/');\n  } else {\n    throw new Error(\"Invalid Credentials!\");\n  }\n}\n\n/*\nfunction login(username, password) {\n    let params = {\n        username,\n        password\n    };\n\n\n    const data = Object.entries(params)\n        .map(([key, val]) => `${key}=${encodeURIComponent(val)}`)\n        .join('&');\n\n    return new Promise((resolve, reject) => {\n        client.post('token', data, {\n            headers: {\n                'content-type': 'application/x-www-form-urlencoded'\n            }\n        }).then(response => {\n            resolve(new LoginResponse(response.data));\n        }).catch(reason => {\n            reject(\"Authentication failed\");\n        })\n    });\n    \n}\n\n*/\n\nconst authService = {\n  login,\n  logout,\n  setToken,\n  getToken,\n  checkLoggedIn\n};\nexport { login, logout, setToken, getToken, checkLoggedIn };\nexport default authService;","map":{"version":3,"names":["LoginResponse","User","client","axios","checkLoggedIn","token","localStorage","getItem","payload","split","JSON","parse","atob","Date","now","e","setToken","setItem","getToken","logout","removeItem","login","username","password","response","fetch","method","headers","body","stringify","status","text","user","router","push","returnUrl","Error","authService"],"sources":["/Users/camdengear/commerce_bank_front_end__/src/services/auth.service.js"],"sourcesContent":["import { LoginResponse, User } from \"../entity\";\nimport { client } from \"./client\";\nimport axios from 'axios';\n\nfunction checkLoggedIn() {\n    let token = localStorage.getItem(\"token\");\n    if (!token) {\n        return false;\n    }\n\n    try {\n        let payload = token.split(\".\")[1];\n        payload = JSON.parse(atob(payload));\n        return payload[\"exp\"] && payload[\"exp\"] > Date.now() / 1000;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction setToken(token) {\n    localStorage.setItem(\"token\", token);\n}\n\nfunction getToken() {\n    return localStorage.getItem(\"token\");\n}\n\nfunction logout() {\n    localStorage.removeItem(\"token\");\n}\n\n\n\n//LOGIN FUNCTION\nasync function login(username: String, password: String){\n    const response = await fetch('http://localhost:8080/token', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({username, password})\n    });\n\n    if(response.status == 200){\n        const token = await response.text();\n        localStorage.setItem('token', JSON.stringify(token));\n        localStorage.setItem('user', JSON.stringify(username));\n        this.user = username;\n        this.token = token;\n        router.push(this.returnUrl || '/')\n\n    } else {\n        throw new Error(\"Invalid Credentials!\");\n    }\n}\n\n\n\n/*\nfunction login(username, password) {\n    let params = {\n        username,\n        password\n    };\n\n\n    const data = Object.entries(params)\n        .map(([key, val]) => `${key}=${encodeURIComponent(val)}`)\n        .join('&');\n\n    return new Promise((resolve, reject) => {\n        client.post('token', data, {\n            headers: {\n                'content-type': 'application/x-www-form-urlencoded'\n            }\n        }).then(response => {\n            resolve(new LoginResponse(response.data));\n        }).catch(reason => {\n            reject(\"Authentication failed\");\n        })\n    });\n    \n}\n\n*/\n\nconst authService = {\n    login,\n    logout,\n    setToken,\n    getToken,\n    checkLoggedIn\n};\n\nexport {\n    login,\n    logout,\n    setToken,\n    getToken,\n    checkLoggedIn\n}\n\nexport default authService;"],"mappings":"AAAA,SAASA,aAAa,EAAEC,IAAI,QAAQ,WAAW;AAC/C,SAASC,MAAM,QAAQ,UAAU;AACjC,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,aAAaA,CAAA,EAAG;EACrB,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACzC,IAAI,CAACF,KAAK,EAAE;IACR,OAAO,KAAK;EAChB;EAEA,IAAI;IACA,IAAIG,OAAO,GAAGH,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACjCD,OAAO,GAAGE,IAAI,CAACC,KAAK,CAACC,IAAI,CAACJ,OAAO,CAAC,CAAC;IACnC,OAAOA,OAAO,CAAC,KAAK,CAAC,IAAIA,OAAO,CAAC,KAAK,CAAC,GAAGK,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI;EAC/D,CAAC,CAAC,OAAOC,CAAC,EAAE;IACR,OAAO,KAAK;EAChB;AACJ;AAEA,SAASC,QAAQA,CAACX,KAAK,EAAE;EACrBC,YAAY,CAACW,OAAO,CAAC,OAAO,EAAEZ,KAAK,CAAC;AACxC;AAEA,SAASa,QAAQA,CAAA,EAAG;EAChB,OAAOZ,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AACxC;AAEA,SAASY,MAAMA,CAAA,EAAG;EACdb,YAAY,CAACc,UAAU,CAAC,OAAO,CAAC;AACpC;;AAIA;AACA,eAAeC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB,EAAC;EACpD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;IACxDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAElB,IAAI,CAACmB,SAAS,CAAC;MAACP,QAAQ;MAAEC;IAAQ,CAAC;EAC7C,CAAC,CAAC;EAEF,IAAGC,QAAQ,CAACM,MAAM,IAAI,GAAG,EAAC;IACtB,MAAMzB,KAAK,GAAG,MAAMmB,QAAQ,CAACO,IAAI,EAAE;IACnCzB,YAAY,CAACW,OAAO,CAAC,OAAO,EAAEP,IAAI,CAACmB,SAAS,CAACxB,KAAK,CAAC,CAAC;IACpDC,YAAY,CAACW,OAAO,CAAC,MAAM,EAAEP,IAAI,CAACmB,SAAS,CAACP,QAAQ,CAAC,CAAC;IACtD,IAAI,CAACU,IAAI,GAAGV,QAAQ;IACpB,IAAI,CAACjB,KAAK,GAAGA,KAAK;IAClB4B,MAAM,CAACC,IAAI,CAAC,IAAI,CAACC,SAAS,IAAI,GAAG,CAAC;EAEtC,CAAC,MAAM;IACH,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;EAC3C;AACJ;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAG;EAChBhB,KAAK;EACLF,MAAM;EACNH,QAAQ;EACRE,QAAQ;EACRd;AACJ,CAAC;AAED,SACIiB,KAAK,EACLF,MAAM,EACNH,QAAQ,EACRE,QAAQ,EACRd,aAAa;AAGjB,eAAeiC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}